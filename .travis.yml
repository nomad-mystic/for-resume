# Taken from
# @link https://github.com/WordPress/twentysixteen/blob/master/.travis.yml

language: php

php:
  - "7.2"

sudo: true

env:
  - WP_VERSION=master WP_MULTISITE=0

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Set up WordPress installation.
  - export WP_DEVELOP_DIR=/tmp/wordpress/
  - mkdir -p $WP_DEVELOP_DIR
  # Use the Git mirror of WordPress.
  - git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
  # Set up Twenty Sixteen theme information.
  - theme_slug=$(basename $(pwd))
  - theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
  - cd ..
  - mv $theme_slug $theme_dir
  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/testing/wordpress_test/" wp-tests-config.php
  - sed -i "s/testing/root/" wp-tests-config.php
  - sed -i "s/testing//" wp-tests-config.php
  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  # Hop into themes directory.
  - cd $theme_dir
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash
  # Install JSCS: JavaScript Code Style checker
  # @link http://jscs.info/
  - npm install -g jscs
  # Install JSHint, a JavaScript Code Quality Tool
  # @link http://jshint.com/docs/
  - npm install -g jshint
  - wget https://develop.svn.wordpress.org/trunk/.jshintrc

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Search theme for PHP syntax errors.
  - find . \( -name '*.php' \) -exec php -lf {} \;
  # Run the theme through JSHint
  # - jshint .
  # Run the theme through JavaScript Code Style checker
  # - jscs .
  # WordPress Coding Standards
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  # -p flag: Show progress of the run.
  # -s flag: Show sniff codes in all reports.
  # -v flag: Print verbose output.
  # -n flag: Do not print warnings (shortcut for --warning-severity=0)
  # --standard: Use WordPress as the standard.
  # --extensions: Only sniff PHP files.
  # - $WP_DEVELOP_DIR/php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php